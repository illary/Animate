{
  "name": "Animate",
  "tagline": "Animate is a programing language that allows users to doodle and create drawings through the use of basic commands that present shapes , colors and movement.",
  "body": "\r\n***\r\n### Motivation\r\nDrawing has been a pastime for people throughout decades, it being a doodle on a notepad or a masterpiece presented on a canvas. Some with more talent or creativity than others but all with the ability to portray some type of feeling or thought. “Animate” is a programing language that allows even the most inexperienced artist to doodle and create their drawings easily as well as make animated mock up stages and scenarios through the use of basic commands that present shapes and colors. Not only can a combination of commands translate to a drawing but movement can be incorporated to objects within the drawing creating a dynamic amination. \r\n\r\n“Animate” like any programing language is composed of fundamental aspects such as syntax, semantics, statements and variable components. Designed in a simple non complicated manner that allows all types of people to be able to use it. Users will write their drawing commands in a text editor therefore creating scripts what will later on be parsed and translated to Python code to be  compiled and ran, presenting the drawing animation to the user as a final product.\r\n\r\n### How to use Animate\r\n\r\n[![](http://img.youtube.com/vi/eH7D-8C8suk/0.jpg)](http://www.youtube.com/watch?v=eH7D-8C8suk)\r\n[Animate Tutorial](https://www.youtube.com/watch?v=eH7D-8C8suk)\r\n\r\n### Language Reference Manual\r\n\r\nThe following are the commands and instructions used in “Animate” programming language:\r\n\r\n**Frame:**\r\ncreateFrame(width,height,background)\r\n* Creates the frame in which the graphics will be drawn. The width, height and background color are specified within the constructor.  \r\n\r\n*Note: All animation should begin with the creation of a frame. Once frame is created user will receive the following message: “Frame Created”. If frame has not been created and user tries to create a shape the following error message will be presented: \"A frame has not been create\".\r\n\r\n**Shapes:**\r\nColor Identifier Rectangle(x0,y0,width,height)\r\n* Creates a rectangle with a given color at the coordinates x0,y0 using the top left corner as a reference with a specified width and height.\r\n\r\nColor Identifier Circle(x0,y0,radius)\r\n* Creates a circle with the given color at the coordinates x0,y0 using the center as a reference with a specified radius.\r\n\r\nColor Identifier Triangle(x0,y0,x1,y1,x2,y2)\r\n* Creates a triangle with the given color and  point coordinates.\r\n\r\n**Movement:**\r\nAnimate (deltaX,deltaY,iterations, sec)\r\n* Animates the objects in the frame by moving them deltaX and deltaY pixels. The image will be updated the amount of milliseconds   stated in the parameter “sec”.\r\n\r\n**Image:**\r\nloadImage(x0,y0,imageName)\r\n* Load an image into a frame at coordinates x0,y0.\r\n\r\n**Available colors:**\r\n* White\r\n* Black\r\n* Red\r\n* Green\r\n* Blue\r\n* Cyan \r\n* Yellow \r\n* Magenta\r\n\r\n*Note: Shape will be set to white as default  if user sets a color that is not stated above and the following message will be presented: \"Color is not available, setting color to white\".\r\n\r\n**Reserved Words:**\r\n*  createframe \r\n*  rectangle \r\n*  circle \r\n*  triangle \r\n*  animate\r\n*  image \r\n\r\n### Approach\r\nTranslator Architecture: \r\n![](https://github.com/illary/Animate/blob/master/Translator%20architecture.png?raw=true)\r\n\r\n\r\nAnimate is composed of 3 main modules; Animate_lex, Animate_parser and Window Creator. Animate parser being the main focus of the programming language since within this module the main program is ran, and the user input commands are received. User input is then parsed by  Yacc using the PLY library which uses python functions stated by the developer. These functions define grammar characteristics of the language. Yacc parser must match the functions found in Animate_parser module with the code entered by the user through the consideration of specific tokens defined in the Animate_Lex module. These tokens are composed of token name and regular expression needed to match and compare user input within the Animate language. Finally the WindowsCreater module is called to execute input instruction using specific python functions.    \r\n\r\nIn addition to the three main modules, “Animate” language uses the following libraries, packages and modules:\r\n\r\n**PLY**- is a parsing tool written purely in Python which re-implements the Lex and Yacc originally found in C language. It provides excellent debugging and error reporting facilities and it uses LR parsing to incorporate large grammars. Both Animate_lex and Animate_Parser use this library.\r\n\r\n**Tkinter** - is a Graphical User Interface (GUI) package for python used in the WindowCreater module to provide user with a visual element.\r\n\r\n**Time** - is a module that provides various functions that deal with time and dates within a day. This module is specifically used to support the animate command. \r\n\r\n### Documentation\r\n[Animate FinalReport](https://github.com/illary/Animate/blob/master/FinalReportPL.pdf)\r\n\r\n### Authors and Contributors\r\n* Martín J. Rivera Rosa   \r\n* Wilfredo Montanez                                                                    \t       \t  \t                                      \t     \t     \t  \t\t\t\t\t\t\t    \t        * Jose Rodriguez Piña\r\n* Illary Lopes Aulet",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}